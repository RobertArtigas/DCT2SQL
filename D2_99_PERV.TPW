#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#! File Name:   d2perv.tpw
#! Purpose:     DCT to Pervasive creation script
#! Author:      Roberto Artigas Jr
#! Changes:
#! 2001.07.27   Roberto Artigas Jr
#!  *   Adjusted documentation spaces
#!  *   Broke appart into smaller pieces
#! Adaptado a Pervasive SQL por Rafael Salguero Agruel
#!
#!---------------------------------------------------------------------
#UTILITY(Dct2Pervasive, '2016.02.17: Dictionary to Pervasive.SQL script')
#!---------------------------------------------------------------------
#SHEET,HSCROLL
 #TAB('General')
  #BOXED('')
   #DISPLAY('Generador de script para Pervasive.SQL')
   #DISPLAY('Copyright 2001-2001 (c) by Roberto Artigas Jr.')
   #DISPLAY('All Rights Reserved World Wide.')
   #DISPLAY('')
   #PROMPT('salida: ',@S80),%OutputFile,AT(40,,140),DEFAULT(SUB(%DictionaryFile,1,LEN(%DictionaryFile)-4) & '.sql')
   #DISPLAY('')
   #PROMPT('¿Crear todas las tablas? ',CHECK),%AllTables,AT(10),DEFAULT(1)
   #PROMPT('¿Crear relaciones? ',CHECK),%CreateRelation,AT(10),DEFAULT(1)
   #PROMPT('¿Borrar base de datos? ',CHECK),%DropDatabase,AT(10),DEFAULT(0)
   #PROMPT('¿Borrar tablas existentes? ',CHECK),%DropTable,AT(10),DEFAULT(0)
   #DISPLAY('')
   #DISPLAY('If you do not use PKEYA at the field level, check on the')
   #DISPLAY('create primary indexes flag just below this line.')
   #!DISPLAY('')
   #PROMPT('¿Crear indices primarios? ',CHECK),%CreatePrimary,AT(10),DEFAULT(1)
  #ENDBOXED
 #ENDTAB
 #TAB('Arrays')
  #BOXED('')
   #DISPLAY('There are two ways to handle arrays:')
   #DISPLAY('')
   #DISPLAY('1) You defined a group with all the fields of the array')
   #DISPLAY('inside this group. Then you put the array OVER the')
   #DISPLAY('group. If you set up your arrays in this manner, then')
   #DISPLAY('LEAVE the checkbox bellow OFF.')
   #DISPLAY('')
   #DISPLAY('2) You define your arrays as actual fields using no')
   #DISPLAY('groups whatsoever. If you set up your arrays this way,')
   #DISPLAY('then TURN ON the checkbox bellow.')
   #DISPLAY('')
   #DISPLAY('')
   #PROMPT('NO TENGO ARREGLOS SOBRE GRUPOS. ',CHECK),%NoArrayOver,AT(10),DEFAULT(0)
   #DISPLAY('')
  #ENDBOXED
 #ENDTAB
 #TAB('Standarizar')
  #BOXED('')
   #PROMPT('Force BOOLEAN validation to [Y,N] choices? ',CHECK),%ForceBoolYN,AT(10),DEFAULT(0)
   #PROMPT('Force INLIST validation to no default? ',CHECK),%ForceListNoDef,AT(10),DEFAULT(0)
   #PROMPT('Fixed size for all STRINGS < 256 bytes? ',CHECK),%FixedStr255,AT(10),DEFAULT(1)
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
   #DISPLAY('')
  #ENDBOXED
 #ENDTAB
 #TAB('Seleccionar tablas')
  #BOXED('')
   #BUTTON('Generar solo para las tablas...'),MULTI(%InclTables,%InclTable),AT(,,170,140),INLINE
    #PROMPT('Tabla: ', FROM(%FILE)),%InclTable,REQ,DEFAULT('')
   #ENDBUTTON
  #ENDBOXED
 #ENDTAB
#ENDSHEET
#!---------------------------------------------------------------------
#DECLARE(%NFileUser)                    #! File user options [RASQL]
#DECLARE(%NFileOpt1)                    #! File option 1 [NO]
#DECLARE(%NFileOpt2)                    #! File option 2 [ISAM|MYISAM|HEAP|MERGE|DBD]
#DECLARE(%NFileOpt3)                    #! File option 3 [DEFAULT|DYNAMIC|STATIC|COMPRESSED]
#DECLARE(%NFileOpt4)                    #! File option 4
#!
#DECLARE(%NFieldUser)                   #! Field user options [RASQL]
#DECLARE(%NFieldOpt1)                   #! Field option 1 [NO]
#DECLARE(%NFieldOpt2)                   #! Field option 2 [<Field Type>]
#DECLARE(%NFieldOpt3)                   #! Field option 3 [PKEYA+AUTO+NOTNULL]
#DECLARE(%NFieldOpt4)                   #! Field option 4
#!
#DECLARE(%NKeyUser)                     #! Key user options [RASQL]
#DECLARE(%NKeyOpt1)                     #! Key option 1 [NO]
#DECLARE(%NKeyOpt2)                     #! Key option 2 [PKEYA|SKEYA]
#DECLARE(%NKeyOpt3)                     #! Key option 3
#DECLARE(%NKeyOpt4)                     #! Key option 4
#!
#DECLARE(%NRelationUser)                #! Relation user options [RASQL]
#DECLARE(%NRelationOpt1)                #! Relation option 1 [NO]
#DECLARE(%NRelationOpt2)                #! Relation option 2
#DECLARE(%NRelationOpt3)                #! Relation option 3
#DECLARE(%NRelationOpt4)                #! Relation option 4
#!
#DECLARE(%NFileName)                    #! File Name
#DECLARE(%NFileType)                    #! TYPE=???
#DECLARE(%NFileRowFormat)               #! ROW_FORMAT=???
#!
#DECLARE(%NFieldPKey)                   #! Field is Primary Key?
#DECLARE(%NFieldLine)                   #! Field line
#DECLARE(%NFieldName)                   #! Field Name
#DECLARE(%NFieldTSql)                   #! Field SQL type
#DECLARE(%NFieldType)                   #! Field type
#DECLARE(%NFieldDef)                    #! Field default
#DECLARE(%NFieldAuto)                   #! Field AUTO_INCREMENT
#DECLARE(%NFieldNN)                     #! Field NOT NULL
#DECLARE(%NFieldSize  ,LONG)            #! Field decimal size
#DECLARE(%NFieldDec   ,LONG)            #! Field decimal places
#!
#DECLARE(%NKeyName)                     #! Key name
#DECLARE(%NKeyFields)                   #! Key building line
#DECLARE(%NKeyField)                    #! Key field current
#DECLARE(%NKeyFieldCount)               #! Number of key fields
#DECLARE(%PrimaryCount)                 #! Primary key exists
#DECLARE(%SecondaryCount)               #! Secondary key exits
#!
#DECLARE(%NRelateItem)                  #! Working item number
#DECLARE(%NRelateCount)                 #! Total items to work
#DECLARE(%NRelateComma)                 #! Number of commas
#DECLARE(%NRelateFile)                  #! Related file
#DECLARE(%NRelateField1)                #! Related origin field
#DECLARE(%NRelateField2)                #! Related relate field
#DECLARE(%RelationField1Count)          #! Count of origin file key items
#DECLARE(%RelationField2Count)          #! Count of relate file key items
#DECLARE(%RelationField1)               #! The origin file keys
#DECLARE(%RelationField2)               #! The relate file keys
#DECLARE(%RelationUpdate)               #! ON UPDATE ?
#DECLARE(%RelationDelete)               #! ON DELETE ?
#!
#DECLARE(%nLoc1       ,LONG)            #! Location 1
#DECLARE(%nLoc2       ,LONG)            #! Location 2
#DECLARE(%CStringLen)                   #! Length of types shortened by one
#DECLARE(%LastField)                    #! Last field processed
#DECLARE(%InnerGroup)                   #! Inner group level processed
#DECLARE(%FieldComma)                   #! Number of fields - 1
#!
#DECLARE(%ChoiceLine)                   #! Build ENUM field type line
#DECLARE(%ChoiceComma)                  #! Count ENUM values - 1
#!
#DECLARE(%DocVar)                       #! Documentation Variable
#DECLARE(%TableCount, 0)                #! Count of tables
#DECLARE(%PKeyCount, 0)                 #! Count of primary keys (From Keys)
#DECLARE(%PKeyOption, 0)                #! Count of primary keys (From Options)
#DECLARE(%KeyOthers, 0)                 #! Count of secondary keys
#DECLARE(%KeyCount, 0)                  #! Count of all keys combined
#DECLARE(%FieldCount, 0)                #! Count of fields
#DECLARE(%RelCount, 0)                  #! Relationship Counts
#DECLARE(%FieldTable),MULTI,UNIQUE      #! List of unique fields
#DECLARE(%FieldUnique, 0)               #! Count of unique fields
#!
#DECLARE(%TheDate)                      #! Display current date
#DECLARE(%TheTime)                      #! Display current time
#SET(%TheDate,FORMAT(TODAY(),@D010))    #! Set current date
#SET(%TheTime,FORMAT(CLOCK(),@T06))     #! Set current time
#!
#DECLARE (%DimCount   ,LONG)            #! Number of dimensions
#DECLARE (%FldArray   ,STRING)          #! Created field name from array
#DECLARE (%FD1S       ,STRING)          #! Number for dimension 1
#DECLARE (%FD2S       ,STRING)          #! Number for dimension 2
#DECLARE (%FD3S       ,STRING)          #! Number for dimension 3
#DECLARE (%FD4S       ,STRING)          #! Number for dimension 4
#DECLARE (%FD1I       ,LONG)            #! Looping in Dimension 1
#DECLARE (%FD2I       ,LONG)            #! Looping in Dimension 2
#DECLARE (%FD3I       ,LONG)            #! Looping in Dimension 3
#DECLARE (%FD4I       ,LONG)            #! Looping in Dimension 4
#DECLARE (%FD1L       ,LONG)            #! Set to %FieldDimension1
#DECLARE (%FD2L       ,LONG)            #! Set to %FieldDimension2
#DECLARE (%FD3L       ,LONG)            #! Set to %FieldDimension3
#DECLARE (%FD4L       ,LONG)            #! Set to %fieldDimension4
#!---------------------------------------------------------------------
#DECLARE(%LFieldInKey),MULTI,UNIQUE     #! Field list that are used in keys
#DECLARE(%IFieldInKey)                  #! Field item to search for in list
#DECLARE(%LFieldInKeyCount)             #! How many fields are in keys?
#!
#! Rafael Salguero
#!
#DECLARE (%FieldAutoNumber)
#DECLARE (%Numeral)             #! Para poner el signo de número (#) en cambios de línea del script.
#DECLARE (%NombreArchivo)
#DECLARE (%ExtensionArchivo)
#DECLARE (%Pos1, LONG )         #!Posición para busca substring
#DECLARE (%Saltar,LONG )        #!Bandera para saltar a la siguiente tabla
#!
#FREE(%LFieldInKey)
#FOR(%File)
  #IF(ITEMS(%Key))
    #FOR(%Key)
      #FOR(%KeyField)
        #ADD(%LFieldInKey,%KeyField)
      #ENDFOR
    #ENDFOR
  #ENDIF
#ENDFOR
#SET(%LFieldInKeyCount,ITEMS(%LFieldInKey))
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#INSERT(%ClarionReservedWords)
#INSERT(%SqlReservedWords)
#FOR(%ClarionWordList)
  #ADD(%SqlWordList,%ClarionWordList)
#ENDFOR
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#SET(%TableCount, 0)                    #! Count of tables
#SET(%PKeyCount, 0)                     #! Count of primary keys (From Keys)
#SET(%PKeyOption, 0)                    #! Count of primary keys (From Options)
#SET(%KeyOthers, 0)                     #! Count of secondary keys
#SET(%KeyCount, 0)                      #! Count of all keys combined
#SET(%FieldCount, 0)                    #! Count of fields
#SET(%RelCount, 0)                      #! Relationship Counts
#SET(%FieldUnique, 0)                   #! Count of unique fields
#!---------------------------------------------------------------------
#CREATE(%OutputFile)
#MESSAGE('Creador de script para Pervasive.SQL Script',0)
#MESSAGE('Creando: ' & %OutputFile,1)
#!---------------------------------------------------------------------
--
-- BOF: %OutputFile
--
-- Creador de scripts para Pervasive SQL
-- Creado: %TheDate - %TheTime
--
#SET(%Numeral,'#')
#SET(%ExtensionArchivo,'.mkd')
#IF(%AllTables)
  #IF(%DropDatabase)
DROP DATABASE  %Application
%Numeral
  #ENDIF
CREATE DATABASE %Application
%Numeral
#ENDIF
USE %Application
%Numeral
#!---------------------!
#! Dump the files here !
#!---------------------!
#FOR(%File)
  #!
  #IF(%AllTables = 0)
    #SET(%Saltar,1)
    #FOR(%InclTables)
    #IF(CLIP(%InclTable)=CLIP(%File) )
      #SET(%Saltar,0)
      #BREAK
    #ENDIF
    #ENDFOR
    #IF(%Saltar=1)
    #CYCLE
    #ENDIF
  #ENDIF
  #!
  #SET(%nLoc1,INSTRING('RASQL(',%FileUserOptions,1,1) )
  #SET(%nLoc2,INSTRING(')',%FileUserOptions,1,%nLoc1))
  #SET(%nFileUser,UPPER(SUB(%FileUserOptions,%nLoc1,%nLoc2)))
  #!SET(%NFileUser,UPPER(EXTRACT(%FileUserOptions,'RASQL')))
  #SET(%NFileOpt1,EXTRACT(%NFileUser,'RASQL',1))
  #SET(%NFileOpt2,EXTRACT(%NFileUser,'RASQL',2))
  #SET(%NFileOpt3,EXTRACT(%NFileUser,'RASQL',3))
  #SET(%NFileOpt4,EXTRACT(%NFileUser,'RASQL',4))
#!%NFileUser, %NFileOpt1, %NFileOpt2, %NFileOpt3, %NFileOpt4
  #!-------------------------------------------------------------!
  #! The first option RASQL(NO) controls if a file is processed. !
  #!-------------------------------------------------------------!
  #IF(SUB(%NFileOpt1,1,1)='N')
    #CYCLE
  #ENDIF
#!
  #CASE(%FileType)
  #OF  ('VIEW')
  #OROF('ALIAS')
      #CYCLE
  #ENDCASE
#!
  #CASE(%FileDriver)
    #OF('ASCII')
  #OROF('BASIC')
  #OROF('DOS')
  #OROF('Clipper')
  #OROF('TopSpeed')
      #CYCLE
  #ENDCASE
#!
#!
  #MESSAGE('Generación de la tabla: ' & %File,2)
  #SET(%TableCount, %TableCount + 1)
  #SET(%NFieldPKey,UPPER(%FilePrefix) & '_PK')                  #! PK Naming Convention
#!
  #SET(%NFileName,%File)                                        #! This is the name
  #SET(%SqlWordItem, UPPER(%NFileName))                         #! Set up search of
  #FIND(%SqlWordList, %SqlWordItem)                             #! SQL reserved words
  #IF(%SqlWordList)                                             #! Found? Yes! We add
    #SET(%NFileName, %NFileName & '_')                          #! trailing underscore
  #ENDIF                                                       #! to get it through
  #SET(%FieldAutoNumber,'')
  #SET(%FieldAutoNumber,'')
  #FOR(%Key)
     #IF(%KeyAuto)
        #SET(%FieldAutoNumber,%KeyAuto)
        #BREAK
     #ENDIF
  #ENDFOR
#!--
#!-- Archivo: %File(%FilePrefix) - %FileDescription - Driver: %FileDriver %FileDriverParameter
#!--


  #FOR(%Field)
    #SET(%nLoc1,INSTRING('RASQL(',%FieldUserOptions,1,1))
    #SET(%nLoc2,INSTRING(')',%FieldUserOptions,1,%nLoc1))
    #SET(%nFieldUser,UPPER(SUB(%FieldUserOptions,%nLoc1,%nLoc2)))
    #!SET(%NFieldUser,UPPER(EXTRACT(%FieldUserOptions,'RASQL')))
    #SET(%NFieldOpt1,EXTRACT(%NFieldUser,'RASQL',1))
    #SET(%NFieldOpt2,EXTRACT(%NFieldUser,'RASQL',2))
    #SET(%NFieldOpt3,EXTRACT(%NFieldUser,'RASQL',3))
    #SET(%NFieldOpt4,EXTRACT(%NFieldUser,'RASQL',4))
    #IF(SUB(%NFieldOpt1,1,1)='N')
      #CYCLE
    #ENDIF
    #CASE(%FieldType)
    #OF  ('GROUP')
    #OROF('END')
      #CYCLE
    #ENDCASE
    #SET(%DocVar, SUB(%Field, INSTRING(':',%Field,1,1) + 1 , 50))
#!-- %[29]DocVar     %[11]FieldType %FieldDescription
  #ENDFOR
#!--
#!
%Numeral
#!Quita el texto BTRV
#!
#SET (%Pos1,INSTRING('BTRV',%File,1,1) )
#IF(%Pos1)
#SET(%NFileName,SUB(%File,1,%Pos1-1))
#ENDIF
#SET(%NombreArchivo,%NFileName)
#IF(%FileName)
#SET(%NombreArchivo, %FileName)
#!
#!Quita el path del nombre del archivo
#!
#SET(%Pos1,INSTRING(':',%NombreArchivo))
#IF(%Pos1)
#SET(%NombreArchivo,SUB(%NombreArchivo,%Pos1+1,LEN(%NombreArchivo)))
#ENDIF
#LOOP
#SET(%Pos1,INSTRING('\',%NombreArchivo))
#IF(%Pos1=0)
#BREAK
#ENDIF
#SET(%NombreArchivo,SUB(%NombreArchivo,%Pos1+1,LEN(%NombreArchivo)))
#ENDLOOP
#END
#IF(LEFT(%NombreArchivo,1)<>chr(39))
#SET(%NombreArchivo,CHR(39)&%NombreArchivo)
#END
#!
#!Extrae el nombre del archivo de las user options para los archivos tipo Pervasive.Sql(SQL)
#!
#IF(%FileDriver='Scalable')
#SET(%NombreArchivo,EXTRACT(%FileUserOptions,'Archivo',1))
#SET(%NombreArchivo,CHR(39)&%NombreArchivo&CHR(39))
#ENDIF
#!
%Numeral
  #IF(%DropTable)
DROP TABLE %NFileName
  #ENDIF
%Numeral
CREATE TABLE  %NFileName USING %NombreArchivo  (
#INSERT(%PervasiveField)                                            #! Process fields
)
%Numeral
#!COMMENT = '%FileDescription'                                  #! Works and commented out
#!------------------------------------------------!
#! Deal with the different type of internal files !
#! available for the MySQL database.              !
#!------------------------------------------------!
  #SET(%NFileType,'')                                           #! TYPE=???
  #IF(%NFileOpt2)
    #CASE(%NFileOpt2)
    #OF  ('ISAM')
    #OROF('MYISAM')
    #OROF('HEAP')
    #OROF('MERGE')
    #OROF('DBD')
    #OROF('GEMINI')                                             #! RAS.2001.07.22
      #SET(%NFileType, 'TYPE = ' & %NFileOpt2)
    #ENDCASE
  #ENDIF
#!---------------------------------------------!
#! Deal with the different type of row_formats !
#! available for the MySQL database.           !
#!---------------------------------------------!
  #SET(%NFileRowFormat,'')                                      #! ROW_FORMAT=???
  #IF(%NFileOpt3)
    #CASE(%NFileOpt3)
    #OF  ('DEFAULT')
    #OROF('DYNAMIC')
    #OROF('STATIC')
    #OROF('COMPRESSED')
      #SET(%NFileRowFormat, 'ROW_FORMAT = ' & %NFileOpt3)
    #ENDCASE
  #ENDIF
#!----------------------------------------!
#! Dump all the extra table option lines. !
#!----------------------------------------!
  #IF(%NFileType)                                               #! TYPE=???
%NFileType
  #ENDIF
  #IF(%NFileRowFormat)                                          #! ROW_FORMAT=???
%NFileRowFormat
  #ENDIF
#!--------------------!
#! Dump the keys here !
#!--------------------!
  #SET(%PrimaryCount,0)                                         #! Primary key exists
  #SET(%SecondaryCount,0)                                       #! Secondary key exists
  #IF(ITEMS(%Key))
    #FOR(%Key)
      #IF(NOT ITEMS(%KeyField))                                 #! Key has fields? No!
        #CYCLE                                                  #! Then go to the next
      #ENDIF                                                    #! key to be processed
#!
      #SET(%nLoc1,INSTRING('RASQL(',%KeyUserOptions,1,1))
      #SET(%nLoc2,INSTRING(')',%KeyUserOptions,1,%nLoc1))
      #SET(%nKeyUser,UPPER(SUB(%KeyUserOptions,%nLoc1,%nLoc2)))
      #!SET(%NKeyUser,UPPER(EXTRACT(%KeyUserOptions,'RASQL')))
      #SET(%NKeyOpt1,EXTRACT(%NKeyUser,'RASQL',1))
      #SET(%NKeyOpt2,EXTRACT(%NKeyUser,'RASQL',2))
      #SET(%NKeyOpt3,EXTRACT(%NKeyUser,'RASQL',3))
      #SET(%NKeyOpt4,EXTRACT(%NKeyUser,'RASQL',4))
#!%NKeyUser, %NKeyOpt1, %NKeyOpt2, %NKeyOpt3, %NKeyOpt4
      #!------------------------------------------------------------!
      #! The first option RASQL(NO) controls if a key is processed. !
      #!------------------------------------------------------------!
      #IF(SUB(%NKeyOpt1,1,1)='N')
        #CYCLE
      #ENDIF
#!
      #SET(%NKeyName,%KeyID)
      #SET(%SqlWordItem, UPPER(%NKeyName))                      #! Set up search of
      #FIND(%SqlWordList, %SqlWordItem)                         #! SQL reserved words
      #IF(%SqlWordList)                                         #! Found? Yes! We add
        #SET(%NKeyName, %NKeyName & '_')                        #! trailing underscore
      #ENDIF                                                    #! to get it through
#!
      #SET(%NKeyFields,'')
      #SET(%NKeyFieldCount,0)
      #FOR(%KeyField)
        #SET(%NKeyField, SUB(%KeyField, INSTRING(':',%KeyField,1,1) + 1 , 50))
        #SET(%SqlWordItem, UPPER(%NKeyField))                   #! Set up search of
        #FIND(%SqlWordList, %SqlWordItem)                       #! SQL reserved words
        #IF(%SqlWordList)                                       #! Found? Yes! We add
          #SET(%NKeyField, %NKeyField & '_')                    #! trailing underscore
        #ENDIF                                                  #! to get it through
        #SET(%NKeyFieldCount,%NKeyFieldCount + 1 )
        #IF(%NKeyFieldCount = 1)
          #SET(%NKeyFields,%NKeyField)
        #ELSE
          #SET(%NKeyFields, %NKeyFields & ', ' & %NKeyField)
        #ENDIF
        #!------------------------------------------------------!
        #! The dictionary has ASCENDING and DESCENDING defined. !
        #! Tried adding the keywords bellow and it parsed okay. !
        #! It does nothing (not part of SQL) and was taken out. !
        #!------------------------------------------------------!
        #!#IF(SUB(%KeyFieldSequence,1,1)='A')
        #!  #SET(%NKeyFields,%NKeyFields & ' ASC')
        #!#ELSE
        #!  #SET(%NKeyFields,%NKeyFields & ' DESC')
        #!#ENDIF
      #ENDFOR
      #IF(%KeyPrimary)
        #!----------------------------------------------------------!
        #! This option being OFF allows you to create PRIMARY KEY's !
        #! that are AUTO_INCREMENTED at the field level.            !
        #!----------------------------------------------------------!
        #IF(%CreatePrimary)
          #SET(%PrimaryCount, 1)
          #SET(%PKeyCount, %PKeyCount + 1)
          #SET(%KeyCount, %KeyCount + 1)
          #CASE(%NKeyOpt2)
          #OF  ('PKEYA')
          #OF  ('SKEYA')
          #ENDCASE
          #FOR(%KeyField)
            #SET(%DocVar, SUB(%KeyField, INSTRING(':',%KeyField,1,1) + 1 , 50))
          #ENDFOR
--
ALTER TABLE %NFileName ADD
  CONSTRAINT %NKeyName
  PRIMARY KEY (%NKeyFields)
%Numeral
        #ENDIF
      #ELSIF(NOT %KeyPrimary)
        #SET(%KeyOthers, %KeyOthers + 1)
        #SET(%KeyCount, %KeyCount + 1)
        #IF(%KeyDuplicate)
          #CASE(%NKeyOpt2)
          #OF  ('PKEYA')
          #OF  ('SKEYA')
          #ENDCASE
          #FOR(%KeyField)
            #SET(%DocVar, SUB(%KeyField, INSTRING(':',%KeyField,1,1) + 1 , 50))
          #ENDFOR
          #CASE(%KeyIndex)
          #OF  ('KEY')
CREATE INDEX %NKeyName ON %NFileName (%NKeyFields)
%Numeral
          #OF  ('INDEX')
          #OROF('DYNAMIC')
CREATE INDEX %NKeyName ON %NFileName (%NKeyFields)
%Numeral
          #ENDCASE
        #ELSE
          #CASE(%NKeyOpt2)
          #OF  ('PKEYA')
          #OF  ('SKEYA')
          #ENDCASE
          #FOR(%KeyField)
            #SET(%DocVar, SUB(%KeyField, INSTRING(':',%KeyField,1,1) + 1 , 50))
          #ENDFOR
          #CASE(%KeyIndex)
          #OF  ('KEY')
CREATE UNIQUE INDEX %NKeyName ON %NFileName (%NKeyFields)
%Numeral
          #OF  ('INDEX')
          #OROF('DYNAMIC')
CREATE UNIQUE INDEX %NKeyName ON %NFileName (%NKeyFields)
%Numeral
          #ENDCASE
        #ENDIF
      #ENDIF
    #ENDFOR
    #IF(%CreatePrimary)
      #IF(NOT %PrimaryCount)
--
-- WARNING: %File(%FilePrefix) has no PRIMARY KEY defined.
--
      #ENDIF
    #ENDIF

  #ENDIF
#ENDFOR

#!-------------------------!
#! Dump the relations here !
#!-------------------------!
#IF(%CreateRelation)
#!

--
-- FOREIGN KEYS (RELATIONSHIPS)
-- MySQL processes foreign keys syntax but ignores it.
--

  #SET(%RelCount, 0)                                            #! Relation Count to zero
  #FOR(%File)
    #CASE(%FileDriver)
      #OF('ASCII')
    #OROF('BASIC')
    #OROF('DOS')
    #OROF('Clipper')
        #CYCLE
    #ENDCASE
#!
    #CASE(%FileType)
    #OF  ('VIEW')
#!------------------------------------------------------------!
#! RAS.2001.07.22 - Need to deal with aliases for the purpose !
#! of discovering additional key relationships that can not   !
#! be done with a single file from Clarion. In specific       !
#!                                                            !
#! Tables                                                     !
#!  Party_Table         Party_Relationship_Table              !
#!  Party_Id            Party_Id_From                         !
#!                      Party_Id_To                           !
#! Relations                                                  !
#!  Party_Id    <->>    Party_Id_From                         !
#!  Party_Id    <->>    Party_Id_To                           !
#!                                                            !
#! Clarion would need an alias of Party_Relationship_Table to !
#! deal with the second relationship. There would be no way   !
#! to use the second table again since Clarion restricts that !
#! specific operation.                                        !
#!                                                            !
#! SQL handles these type of relationships correctly and they !
#! need to be generated as an original file relationship.     !
#!------------------------------------------------------------!
#!  #OROF('ALIAS')
        #CYCLE
    #ENDCASE
#!
    #IF(%AllTables = 0)
      #FIND(%InclTable,%File)
      #IF(%InclTable = '')
        #CYCLE
      #ENDIF
    #ENDIF
#!
    #SET(%NFileName,%File)                                      #! This is the name
    #SET(%SqlWordItem, UPPER(%NFileName))                       #! Set up search of
    #FIND(%SqlWordList, %SqlWordItem)                           #! SQL reserved words
    #IF(%SqlWordList)                                           #! Found? Yes! We add
      #SET(%NFileName, %NFileName & '_')                        #! trailing underscore
    #ENDIF                                                      #! to get it through
#!
    #IF(ITEMS(%Relation))
      #FOR(%Relation)
        #SET(%nLoc1,INSTRING('RASQL(',%RelationUserOptions,1,1))
        #SET(%nLoc2,INSTRING(')',%RelationUserOptions,1,%nLoc1))
        #SET(%nRelationUser,UPPER(SUB(%RelationUserOptions,%nLoc1,%nLoc2)))
        #!SET(%NRelationUser,UPPER(EXTRACT(%RelationUserOptions,'RASQL')))
        #SET(%NRelationOpt1,EXTRACT(%NRelationUser,'RASQL',1))
        #SET(%NRelationOpt2,EXTRACT(%NRelationUser,'RASQL',2))
        #SET(%NRelationOpt3,EXTRACT(%NRelationUser,'RASQL',3))
        #SET(%NRelationOpt4,EXTRACT(%NRelationUser,'RASQL',4))
#!%NRelationUser, %NRelationOpt1, %NRelationOpt2, %NRelationOpt3, %NRelationOpt4
        #!-----------------------------------------------------------------!
        #! The first option RASQL(NO) controls if a relation is processed. !
        #!-----------------------------------------------------------------!
        #IF(SUB(%NRelationOpt1,1,1)='N')
          #CYCLE
        #ENDIF
#!
        #IF(%FileRelationType = 'MANY:1')
          #SET(%Relationfield1, '')
          #SET(%Relationfield2, '')
          #SET(%NKeyField, SUB(%FileKey, INSTRING(':',%FileKey,1,1) + 1 , 50))
          #IF(NOT %NKeyField)
            #SET(%NKeyField, SUB(%RelationKey, INSTRING(':',%RelationKey,1,1) + 1 , 50))
          #ENDIF
          #SET(%SqlWordItem, UPPER(%NKeyField))                 #! Set up search of
          #FIND(%SqlWordList, %SqlWordItem)                     #! SQL reserved words
          #IF(%SqlWordList)                                     #! Found? Yes! We add
            #SET(%NKeyField, %NKeyField & '_')                  #! trailing underscore
          #ENDIF                                                #! to get it through
          #!
          #SET(%NRelateFile, %Relation)
          #SET(%SqlWordItem, UPPER(%NRelateFile))               #! Set up search of
          #FIND(%SqlWordList, %SqlWordItem)                     #! SQL reserved words
          #IF(%SqlWordList)                                     #! Found? Yes! We add
            #SET(%NRelateFile, %NRelateFile & '_')              #! trailing underscore
          #ENDIF                                                #! to get it through
          #!
          #SET(%RelationField1Count, ITEMS(%FileKeyField))
          #SET(%RelationField2Count, ITEMS(%RelationKeyField))
          #!
          #SET(%NRelateCount, %RelationField1Count)
          #SET(%NRelateComma, %NRelateCount - 1)
          #SET(%NRelateItem, 0)
          #FOR(%FileKeyField)
            #IF(%NRelateItem > %NRelateCount)
              #BREAK
            #ENDIF
            #SET(%NRelateItem, %NRelateItem + 1)
            #SET(%NRelateField1, SUB(%FileKeyField,INSTRING(':',%FileKeyField,1,1)+1,50))
            #SET(%NRelateField2, SUB(%FileKeyFieldLink,INSTRING(':',%FileKeyFieldLink,1,1)+1,50))
            #!
            #SET(%SqlWordItem, UPPER(%NRelateField1))           #! Set up search of
            #FIND(%SqlWordList, %SqlWordItem)                   #! SQL reserved words
            #IF(%SqlWordList)                                   #! Found? Yes! We add
              #SET(%NRelateField1, %NRelateField1 & '_')        #! trailing underscore
            #ENDIF                                              #! to get it through
            #!
            #SET(%SqlWordItem, UPPER(%NRelateField2))           #! Set up search of
            #FIND(%SqlWordList, %SqlWordItem)                   #! SQL reserved words
            #IF(%SqlWordList)                                   #! Found? Yes! We add
              #SET(%NRelateField2, %NRelateField2 & '_')        #! trailing underscore
            #ENDIF                                              #! to get it through
            #!
            #SET(%RelationField1, %RelationField1 & %NRelateField1)
            #SET(%RelationField2, %RelationField2 & %NRelateField2)
            #IF(%NRelateComma)
              #SET(%NRelateComma, %NRelateComma - 1)
              #SET(%RelationField1, %RelationField1 & ', ')
              #SET(%RelationField2, %RelationField2 & ', ')
            #ENDIF
          #ENDFOR
          #!-------------------------------------------!
          #! RAS.2001.01.20 - Added this feature.      !
          #! Has syntax errors, so commented out.      !
          #!-------------------------------------------!
          #! Added to the comments so programmer is at !
          #! aware that other relationships may exist. !
          #!-------------------------------------------!
          #SET(%RelationUpdate,%RelationConstraintUpdate)       #! ON UPDATE ?
          #SET(%RelationDelete,%RelationConstraintDelete)       #! ON DELETE ?
          #!-------------------------------------------!
          #IF(%Relationfield1)
            #MESSAGE('Relation generation of: ' & %File,2)
            #SET(%RelCount, %RelCount + 1)
            #IF(%FileType = 'ALIAS')                            #! RAS.2001.07.22
            #ENDIF                                              #! RAS.2001.07.22
            #FOR(%FileKeyField)
            #ENDFOR
            #FOR(%RelationKeyField)
            #ENDFOR
            #!----------------------------------------------------------!
            #! RAS.2001.07.22 - The alias name gets changed to the real !
            #! name to generate the SQL statement for the relationship. !
            #!----------------------------------------------------------!
            #IF(%FileType = 'ALIAS')                            #! RAS.2001.07.22
              #SET(%NFileName,%AliasFile)                       #! RAS.2001.07.22
            #ENDIF                                              #! RAS.2001.07.22
ALTER TABLE %NFileName ADD
   CONSTRAINT Rel_%NKeyField
   FOREIGN KEY (%Relationfield1)
   REFERENCES %NRelateFile (%Relationfield2)
            #IF(%RelationUpdate)
              #IF(%RelationUpdate='CASCADE_SERVER')
              #SET(%RelationUpdate,'CASCADE')
              #ENDIF
              #IF(%RelationUpdate='RESTRICT_SERVER')
              #SET(%RelationUpdate,'RESTRICT')
              #ENDIF
              #ENDIF
            #IF(%RelationDelete)
              #IF(%RelationDelete='CASCADE_SERVER')
              #SET(%RelationDelete,'CASCADE')
              #ENDIF
              #IF(%RelationDelete='RESTRICT_SERVER')
              #SET(%RelationDelete,'RESTRICT')
              #ENDIF
   ON DELETE %RelationDelete
            #ENDIF
%Numeral

          #ENDIF
        #ENDIF
      #ENDFOR
    #ENDIF
  #ENDFOR

#ENDIF

#SET(%FieldUnique,ITEMS(%FieldTable))
#IF((%PKeyOption>0)AND(%PKeyCount>0))
!--------------------------------------------------------------------------!
! ERROR: You need to redo this script and turn create primary indexes off. !
!--------------------------------------------------------------------------!

#ENDIF
#!-- Fields In Keys : %LFieldInKeyCount   #! VERY MISLEADING
#!-- Tables            : %[7]TableCount
#!-- Opt: Primary Keys : %[7]PKeyOption   (Counted from field options)
#!-- Key: Primary Keys : %[7]PKeyCount   (Counted when primary key is created)
#!-- Key: Other Keys   : %[7]KeyOthers   (Counted when other keys are created)
#!-- All Keys Counted  : %[7]KeyCount
#!-- Relationships     : %[7]RelCount
#!-- Fields            : %[7]FieldCount
#!-- Unique Fields     : %[7]FieldUnique
#!-- SQL Reserved      : %[7]SqlWordCount
#!-- Clarion Reserved  : %[7]ClarionWordCount
#!--
-- EOF: %OutputFile
--
#!---------------------------------------------------------------------
#CLOSE(%OutputFile)
#RUN('NOTEPAD.EXE "' & %OutputFile & '"')           #! RA.2007.12.05
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#GROUP(%PervasiveField)
#!--------------------------------------------------------------------!
#!--------------------------------------------------------------------!
#!--------------------------------------------------------------------!
#! Crea los campos para Pervasive SQL                                 !
#!--------------------------------------------------------------------!
#!--------------------------------------------------------------------!
#!--------------------------------------------------------------------!
#SET(%InnerGroup, 0)
#SET(%FieldComma, ITEMS(%Field) - 1)
#!
#FOR(%Field)
#! FieldComma='%FieldComma'
  #SET(%nLoc1,INSTRING('RASQL(',%FieldUserOptions,1,1))
  #SET(%nLoc2,INSTRING(')',%FieldUserOptions,1,%nLoc1))
  #SET(%nFieldUser,UPPER(SUB(%FieldUserOptions,%nLoc1,%nLoc2)))
  #!SET(%NFieldUser,UPPER(EXTRACT(%FieldUserOptions,'RASQL')))
  #SET(%NFieldOpt1,EXTRACT(%NFieldUser,'RASQL',1))
  #SET(%NFieldOpt2,EXTRACT(%NFieldUser,'RASQL',2))
  #SET(%NFieldOpt3,EXTRACT(%NFieldUser,'RASQL',3))
  #SET(%NFieldOpt4,EXTRACT(%NFieldUser,'RASQL',4))
#!%NFieldUser, %NFieldOpt1, %NFieldOpt2, %NFieldOpt3, %NFieldOpt4
  #!--------------------------------------------------------------!
  #! The first option RASQL(NO) controls if a field is processed. !
  #!--------------------------------------------------------------!
  #! WARNING: The last field can NOT be an ommited field.         !
  #!--------------------------------------------------------------!
  #! And if the last field happens to be and 'END', you will need !
  #! to add a RASQL(END) to the last field before the 'END'. This !
  #! will suppress the last comma. Reality sometimes happens.     !
  #!--------------------------------------------------------------!
  #IF(SUB(%NFieldOpt1,1,1)='N')
    #SET(%FieldComma, %FieldComma - 1)
    #CYCLE
  #ENDIF
#!
  #SET(%NFieldType, '')                                         #! Field type
  #SET(%NFieldName, '')                                         #! Field name
  #SET(%NFieldTSql, '')                                         #! Field SQL type
  #SET(%NFieldDef,  '')                                         #! Field default
  #SET(%NFieldAuto, '')                                         #! Field AUTO_INCREMENT
  #SET(%NFieldNN,   'NOT NULL')                                 #! Field NOT NULL
  #SET(%NFieldSize, 0)                                          #! Field decimal size
  #SET(%NFieldDec,  0)                                          #! Field decimal places
  #!------------------------------------------------!
  #! Begin removal of types that are not processed. !
  #!------------------------------------------------!
  #IF(%FieldType='GROUP')
    #SET(%InnerGroup, %InnerGroup + 1)
    #IF(INSTRING('OVER(',%FieldStatement,1,1))
      #!SET(%FieldCount, %FieldCount + 1)                       #! RAS.2001.01.15
      #!SET(%FieldComma, %FieldComma - 1)                       #! RAS.2001.01.12
    #ENDIF
    #SET(%FieldComma, %FieldComma - 1)                          #! RAS.2001.01.12
    #CYCLE
  #ENDIF
  #!
  #IF(%FieldType='END')
    #SET(%InnerGroup, %InnerGroup - 1)
    #SET(%FieldComma, %FieldComma - 1)
    #CYCLE
  #ENDIF
  #SET(%FD1L,%FieldDimension1)                                  #! Name 1 made shorter
  #SET(%FD2L,%FieldDimension2)                                  #! Name 2 made shorter
  #SET(%FD3L,%FieldDimension3)                                  #! Name 3 made shorter
  #SET(%FD4L,%FieldDimension4)                                  #! Name 4 made shorter
  #IF(%FD1L>0)                                                  #! IF we got array field,
    #IF(NOT %NoArrayOver)                                       #! AND we got groups,
      #SET(%FieldComma, %FieldComma - 1)                        #! THEN ignore the array
      #CYCLE                                                    #! field since the fields
    #ENDIF                                                      #! in the group are going
  #ENDIF                                                        #! to define the array.
  #!------------------------------------------------!
  #! Ended removal of types that are not processed. !
  #!------------------------------------------------!
#!
  #SET(%NFieldName, %FieldID)                                   #! Field Name
  #SET(%SqlWordItem, UPPER(%NFieldName))                        #! Set up search of
  #FIND(%SqlWordList, %SqlWordItem)                             #! SQL reserved words
  #IF(%SqlWordList)                                             #! Found? Yes! We add
    #SET(%NFieldName, %NFieldName & '_')                        #! trailing underscore
  #ENDIF                                                        #! to get it through
#!
  #SET(%FieldCount, %FieldCount + 1)                            #! Add to field count
  #IF(%NFieldName=%NFieldPKey)                                  #! File Primary Key?
    #IF(%NFieldOpt3)                                            #! Do I have options?
      #IF(INSTRING('PKEYA',%NFieldOpt3,1,1))                    #! PKEYA already set?
      #ELSE                                                     #! No. So add it on.
        #SET(%NFieldOpt3,%NFieldOpt3 & '+PKEYA')                #! Just append option
      #ENDIF                                                    #! at the end of all.
    #ELSE                                                       #! No options found.
      #SET(%NFieldOpt3,'PKEYA')                                 #! Set primary key on
    #ENDIF                                                      #! as option and let
  #ENDIF                                                        #! it be handled
#!
  #!----------------------------------------------------------------!
  #! The second option RASQL(,<FieldType>) overrides the field type !
  #! in the dictionary. This allows conversion of data types that   !
  #! have no existance in the dictionary but exist in the SQL.      !
  #!----------------------------------------------------------------!
  #SET(%NFieldType, %FieldType)
  #IF(%NFieldOpt2)
    #SET(%NFieldType, %NFieldOpt2)
  #ENDIF
  #!-----------------------------------------------------------!
  #!Busca la llave auto inc para poner el campo tipo IDENTITY  !
  #!-----------------------------------------------------------!
  #IF(%Field=%FieldAutoNumber)
     #SET(%NFieldType,'IDENTITY')
  #ENDIF
  #!------------------------------------------------------------!
  #! Busca en "user options" la clave AUTOINC  para poner el    !
  #! campo tipo IDENTITY.                                       !
  #!------------------------------------------------------------!
  #FOR(%Key)
  #FOR(%KeyField)
  #IF(%Field=%KeyField)
  #IF(INSTRINg('AUTOINC(1)',%KeyUserOptions,1,1))
    #SET(%NFieldType,'IDENTITY')
  #ENDIF
  #ENDIF
  #ENDFOR
  #ENDFOR
#!
  #!----------------------------------------------------!
  #! Calculate decimal size and places for some fields. !
  #! Only DECIMAL fields have characters and decimals.  !
  #! Everything else that needs it, is figured out from !
  #! the display mask used.                             !
  #!----------------------------------------------------!
  #! RAS.2001.01.12 - Added additional MySQL types.     !
  #!----------------------------------------------------!
  #SET(%NFieldSize, %FieldMemoSize)                             #! Field decimal size
  #SET(%NFieldDec, %FieldPlaces)                                #! Field decimal places
  #CASE(%NFieldType)
  #OF  ('DEC')                                                  #! NFieldOpt2: MySQL
  #OROF('NUMERIC')                                              #! NFieldOpt2: MySQL
  #OROF('SREAL')
  #OROF('BFLOAT4')
  #OROF('FLOAT')                                                #! NFieldOpt2: MySQL
  #OROF('FLOAT4')                                               #! NFieldOpt2: MySQL
  #OROF('REAL')
  #OROF('BFLOAT8')
  #OROF('DOUBLE')                                               #! NFieldOpt2: MySQL
  #OROF('FLOAT8')                                               #! NFieldOpt2: MySQL
    #SET(%nLoc1,INSTRING('-',%FieldDisplayPicture,1,1))
    #IF(NOT %nLoc1)
      #SET(%nLoc1,INSTRING('N',UPPER(%FieldDisplayPicture),1,1))
    #ENDIF
    #SET(%nLoc2,INSTRING('.',%FieldDisplayPicture,1,1))
    #SET(%NFieldSize,SUB(%FieldDisplayPicture,(%nLoc1+1),(%nLoc2-1)))
    #SET(%NFieldDec,SUB(%FieldDisplayPicture,(%nLoc2+1),LEN(%FieldDisplayPicture)))
#!%FieldDisplayPicture, %nLoc1, %nLoc2, %NFieldSize, %NFieldDec
  #ENDCASE
  #!-------------------------------------------------!
  #! Deal with the initial values in the dictionary. !
  #!-------------------------------------------------!
  #! Additional logic will have to be added to deal  !
  #! with intialization string format parameters.    !
  #! *** More than I want to deal with right now *** !
  #!-------------------------------------------------!
  #SET(%NFieldDef, %FieldInitial)
  #IF(%NFieldDef)
    #CASE(%NFieldType)
    #OF  ('MEMO')
    #OROF('STRING')
    #OROF('CSTRING')
    #OROF('PSTRING')
      #IF(SUB(%NFieldDef,1,1)='''')
      #ELSE
        #SET(%NFieldDef, '''' & %NFieldDef  & '''')
      #ENDIF
    #OF ('DATE')
        #IF(UPPER(%NFieldDef)='TODAY()')
            #SET(%NFieldDef,'CURDATE()')
        #ENDIF
    #ENDCASE
  #ELSE
    #CASE(%NFieldType)
    #OF  ('MEMO')
    #OROF('STRING')
    #OROF('CSTRING')
    #OROF('PSTRING')
      #SET(%NFieldDef, '''''')
    #ENDCASE
  #ENDIF
  #IF(%NFieldDef)
    #SET(%NFieldDef, 'DEFAULT ' & %NFieldDef & '')
  #ENDIF
  #!------------------------------------------------------!
  #! Deal with the dictionary field type conversion here. !
  #!------------------------------------------------------!
  #CASE(%NFieldType)
  #OF  ('BLOB')
      #SET(%NFieldDef,  '')
    #IF(%FieldMemoSize < 256)
      #SET(%NFieldTSql, 'TINYBLOB')
    #ELSIF(%FieldMemoSize < 65536)
      #SET(%NFieldTSql, 'BLOB')
    #ELSE
      #SET(%NFieldTSql, 'MEDIUMBLOB')
    #ENDIF
  #OF  ('MEMO')
  #OROF('STRING')
    #IF(%FieldMemoSize < 5)
      #!SET(%NFieldTSql, 'NATIONAL CHAR(' & %FieldMemoSize & ')' )
      #SET(%NFieldTSql, 'CHAR(' & %FieldMemoSize & ')' )                #! RAS.2001.03.03
    #ELSIF(%FieldMemoSize < 256)
      #IF(%FixedStr255)                                                 #! RAS.2001.01.21
        #!SET(%NFieldTSql, 'NATIONAL CHAR(' & %FieldMemoSize & ')' )
        #SET(%NFieldTSql, 'CHAR(' & %FieldMemoSize & ')' )              #! RAS.2001.03.03
      #ELSE                                                             #! RAS.2001.01.21
        #!SET(%NFieldTSql, 'NATIONAL VARCHAR(' & %FieldMemoSize & ')' )
        #SET(%NFieldTSql, 'VARCHAR(' & %FieldMemoSize & ')' )           #! RAS.2002.03.03
      #ENDIF                                                            #! RAS.2001.01.21
    #ELSE
      #SET(%NFieldTSql, 'LONGVARCHAR')
      #SET(%NFieldDef,  '')
    #ENDIF
  #OF  ('CSTRING')
  #OROF('PSTRING')
      #!SET(%CStringLen, %FieldMemoSize - 1)  Eliminado por R.S.A. 18Feb05
      #SET(%CStringLen, %FieldMemoSize - 1 )
    #IF(%CStringLen < 5)
      #!SET(%NFieldTSql, 'NATIONAL CHAR(' & %CStringLen & ')' )
      #SET(%NFieldTSql, 'CHAR(' & %CStringLen & ')' )                   #! RAS.2001.03.03
    #ELSIF(%CStringLen < 256)
      #IF(%FixedStr255)                                                 #! RAS.2001.01.21
        #!SET(%NFieldTSql, 'NATIONAL CHAR(' & %CStringLen & ')' )
        #SET(%NFieldTSql, 'CHAR(' & %CStringLen & ')' )                 #! RAS.2001.03.03
      #ELSE                                                             #! RAS.2001.01.21
        #!SET(%NFieldTSql, 'NATIONAL VARCHAR(' & %CStringLen & ')' )
        #SET(%NFieldTSql, 'VARCHAR(' & %CStringLen & ')' )              #! RAS.2001.03.03
      #ENDIF                                                            #! RAS.2001.01.21
    #ELSIF(%CStringLen < 65536)
      #SET(%NFieldTSql, 'TEXT')
      #SET(%NFieldDef,  '')
    #ELSE
      #SET(%NFieldTSql, 'MEDIUMTEXT')
      #SET(%NFieldDef,  '')
    #ENDIF
  #OF  ('LONG')
  #OROF('INT')                                                  #! NFieldOpt2: MySQL
  #OROF('INT4')                                                 #! NFieldOpt2: MySQL
  #OROF('INTEGER')                                              #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'INTEGER')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL') #!Tenia ZEROFILL
    #ENDIF
    #IF(INSTRING('@D',UPPER(%FieldRecordPicture),1,1))
      #SET(%NFieldTSql, 'DATE')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
    #IF(INSTRING('@D',UPPER(%FieldDisplayPicture),1,1))
      #SET(%NFieldTSql, 'DATE')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
    #IF(INSTRING('@T',UPPER(%FieldRecordPicture),1,1))
      #SET(%NFieldTSql, 'TIME')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
    #IF(INSTRING('@T',UPPER(%FieldDisplayPicture),1,1))
      #SET(%NFieldTSql, 'TIME')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('SHORT')
  #OROF('SMALLINT')                                             #! NFieldOpt2: MySQL
  #OROF('INT2')                                                 #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'SMALLINT')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('BYTE')
  #OROF('UTINYINT')                                             #! NFieldOpt2: MySQL
  #OROF('UINT1')                                                #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'UNSIGNED TINYINT')                     #! MySQL Syntax Error
      #SET(%NFieldTSql, 'TINYINT')                              #! RAS.2001.01.13
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('ULONG')
      #SET(%NFieldTSql, 'UINTEGER')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF('UINT')                                                 #! NFieldOpt2: MySQL
  #OROF('UINT4')                                                #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'UNSIGNED INT')                         #! MySQL Syntax Error
      #SET(%NFieldTSql, 'INT')                                  #! RAS.2001.01.18
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('USHORT')
  #OROF('USMALLINT')                                            #! NFieldOpt2: MySQL
  #OROF('UINT2')                                                #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'UNSIGNED SMALLINT')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('DECIMAL')
  #OROF('PDECIMAL')                                             #! RAS.2001.01.17
  #OROF('DEC')                                                  #! NFieldOpt2: MySQL
  #OROF('NUMERIC')                                              #! NFieldOpt2: MySQL
  #!---------------------------------------------------------------------!
  #! RAS.2001.01.09 - IMPORTANT - READ THIS NOW.                         !
  #!---------------------------------------------------------------------!
  #! There is a very big assumption here that your doing a business type !
  #! application so you want to convert binary inaccurate formats to the !
  #! totally binary (financial) accurate format of DECIMAL.              !
  #!---------------------------------------------------------------------!
  #! I get tired of those hours of time spent on penny off errors on     !
  #! financial screens and reports with a calculator to finally come up  !
  #! with the solution of "It is a rounding error!" due to the binary    !
  #! inaccurate format representation of "floats" and "doubles" that     !
  #! are often used to represent money amounts with an actual fractional !
  #! point part for the cents. This happens often in older applications  !
  #! written in languages that did not have a decimal type and with      !
  #! people that did not have experience or knowledge enough to save     !
  #! those financial amounts as whole pennies and adjust their formulas. !
  #!---------------------------------------------------------------------!
  #! If you need the SREAL (4 bytes) and REAL (8 bytes) left alone then  !
  #! move them somewhere else.                                           !
  #!---------------------------------------------------------------------!
  #OROF('SREAL')
  #OROF('BFLOAT4')
  #OROF('FLOAT')                                                #! NFieldOpt2: MySQL
  #OROF('FLOAT4')                                               #! NFieldOpt2: MySQL
  #OROF('REAL')
  #OROF('BFLOAT8')
  #OROF('DOUBLE')                                               #! NFieldOpt2: MySQL
  #OROF('FLOAT8')                                               #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'DECIMAL(' & %NFieldSize & ',' & %NFieldDec & ')')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('DATE')
  #OROF('TIME')
      #SET(%NFieldTSql, %NFieldType)
      #SET(%NFieldDef,  '')
#!
#!
      #!----------------------------------------------------!
      #! Begin MySQL unique field type handling.            !
      #!----------------------------------------------------!
      #! The following are very specific to the SQL backend !
      #! They do not exist in the dictionary in any form.   !
      #!----------------------------------------------------!
      #! These are parameter 2 type entries.                !
      #!----------------------------------------------------!
  #OF  ('TINYINT')                                              #! NFieldOpt2: MySQL
  #OROF('INT1')                                                 #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, %NFieldType)
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('BIGINT')                                               #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, %NFieldType)
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('UBIGINT')                                              #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, 'UNSIGNED BIGINT')
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
      #SET(%NFieldNN,   'NOT NULL')
    #ENDIF
  #OF  ('DATETIME')                                             #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(14)')                                        #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(12)')                                        #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(10)')                                        #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(8)')                                         #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(6)')                                         #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(4)')                                         #! NFieldOpt2: MySQL
  #OROF('TIMESTAMP(2)')                                         #! NFieldOpt2: MySQL
      #SET(%NFieldTSql, %NFieldType)
      #SET(%NFieldDef,  '')
  #OF  ('YEAR')
      #SET(%NFieldTSql, %NFieldType)
    #IF(%FieldInitial = 0)
      #SET(%NFieldDef,  '')
    #ENDIF
      #!----------------------------------------------------!
      #! Ended MySQL unique field type handling.            !
      #!----------------------------------------------------!
#!
#!
  #OF('IDENTITY')
      #SET(%NFieldTSql, %NFieldType)
      #SET(%NFieldDef,  '')
  #ELSE
      #!---------------------------------------------!
      #! This is a field type not currently handled. !
      #! Time to do some more template programming.  !
      #!---------------------------------------------!
      #SET(%NFieldTSql,'***' & %NFieldType & '***')
  #ENDCASE
  #!----------------------------------------------------------!
  #! Deal with field validation parameters in the dictionary. !
  #!----------------------------------------------------------!
  #! If you are validating something, that means it's going   !
  #! to have some value. Mark it as NOT NULL.                 !
  #!----------------------------------------------------------!
  #IF(%FieldValidation)
    #SET(%NFieldNN,     'NOT NULL')
    #CASE(%FieldValidation)
    #OF  ('NONZERO')
    #OF  ('INRANGE')
    #OF  ('BOOLEAN')
    #OF  ('INFILE')
    #ENDCASE
  #ENDIF
  #!--------------------------------------------------------------!
  #! The third option RASQL(,,AUTO+PKEYA+NOTNULL)                 !
  #! allows for additional field attributes that are not handled  !
  #! by the dictionary.                                           !
  #!--------------------------------------------------------------!
  #! If you use PKEYA at the field level DO NOT generate primary  !
  #! keys, since MySQL will complain about the syntax.            !
  #!--------------------------------------------------------------!
  #IF(INSTRING('NOTNULL',%NFieldOpt3,1,1))
    #SET(%NFieldNN,     'NOT NULL')
  #ENDIF
  #IF(INSTRING('AUTO',%NFieldOpt3,1,1))
    #SET(%NFieldAuto,   'AUTO_INCREMENT')
    #SET(%NFieldNN,     'NOT NULL')
  #ENDIF
  #IF(INSTRING('PKEYA',%NFieldOpt3,1,1))                        #! Option is entered
    #SET(%NFieldAuto,   'PRIMARY KEY AUTO_INCREMENT')
    #SET(%NFieldNN,     'NOT NULL')
    #SET(%PKeyOption, %PKeyOption + 1)                          #! Add primary key count
    #SET(%KeyCount, %KeyCount + 1)                              #! RAS.2001.02.02
  #ENDIF
#!
  #ADD(%FieldTable,   %FieldID)
#!
  #SET(%IFieldInKey,%Field)                                     #! Field Name
  #FIND(%LFieldInKey,%IFieldInKey)                              #! Field In Key list lookup
  #IF(%LFieldInKey)                                             #! Found? Yes, part of key.
    #SET(%NFieldNN,     'NOT NULL')                             #! Primary keys fields can
  #ENDIF                                                        #! not be NULL. Make it so!
#!
  #!----------------------------------------------------------------------------!
  #!----------------------------------------------------------------------------!
  #! This is the actual SQL field data line creation.                           !
  #!----------------------------------------------------------------------------!
  #!----------------------------------------------------------------------------!
#!
  #IF(%FD1L>0)                                                  #! We GOT array field
  #!----------------------------------------------------------------------------!
  #! If we got an array field at this point, we do not have arrays over groups. !
  #! We have simple array fields and must add additional fields to the table.   !
  #!----------------------------------------------------------------------------!
    #SET(%FldArray,'')                                          #! Clear created name
    #SET(%FD1S,'')                                              #! Number dimension 1
    #SET(%FD2S,'')                                              #! Number dimension 2
    #SET(%FD3S,'')                                              #! Number dimension 3
    #SET(%FD4S,'')                                              #! Number dimension 4
    #!
    #SET(%DimCount,1)                                           #! Got dimension 1
    #IF(%FD2L>0)                                                #! Dimension 2?
      #SET(%DimCount,%DimCount+1)                               #! Got dimension 2
      #IF(%FD3L>0)                                              #! Dimension 3?
        #SET(%DimCount,%DimCount+1)                             #! Got dimension 3
        #IF(%FD4L>0)                                            #! Dimension 4?
          #SET(%DimCount,%DimCount+1)                           #! Got dimension 4
        #ENDIF                                                  #! Dimension 4?
      #ENDIF                                                    #! Dimension 3?
    #ENDIF                                                      #! Dimension 2?
    #!
    #CASE(%DimCount)                                            #! Logic on dimension
    #OF(1)                                                      #! A 1 dimension array
      #LOOP,FOR(%FD1I,1,%FD1L)
        #SET(%FD1S,'_' & %FD1I)
        #SET(%FldArray,%NFieldName & %FD1S)
        #SET(%NFieldLine,   '')
        #SET(%NFieldLine,   %NFieldLine & ''  & %FldArray)
        #SET(%NFieldLine,   %NFieldLine & ' ' & %NFieldTSql)
        #IF(%NFieldNN)
          #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldNN)
        #ENDIF
        #IF(%NFieldDef)
          #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldDef)
        #ENDIF
        #IF(%NFieldAuto)
          #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldAuto)
        #ENDIF
        #IF(%FD1I=%FD1L)                                        #! Last field?
#!-- %FldArray
          #IF(%FieldComma > 0)
            #SET(%FieldComma, %FieldComma - 1)
            #IF(SUB(%NFieldOpt1,1,1)='E')                       #! RASQL(END)
  %NFieldLine
            #ELSE
  %NFieldLine ,
            #ENDIF
          #ELSE
  %NFieldLine
          #ENDIF
        #ELSE                                                   #! Not last field
  %NFieldLine ,
        #ENDIF                                                  #! Just dump stuff
      #ENDLOOP
    #OF(2)                                                      #! A 2 dimension array
      #LOOP,FOR(%FD1I,1,%FD1L)
        #SET(%FD1S,'_' & %FD1I)
        #LOOP,FOR(%FD2I,1,%FD2L)
          #SET(%FD2S,'_' & %FD2I)
          #SET(%FldArray,%NFieldName & %FD1S & %FD2S)
          #SET(%NFieldLine,   '')
          #SET(%NFieldLine,   %NFieldLine & ''  & %FldArray)
          #SET(%NFieldLine,   %NFieldLine & ' ' & %NFieldTSql)
          #IF(%NFieldNN)
            #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldNN)
          #ENDIF
          #IF(%NFieldDef)
            #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldDef)
          #ENDIF
          #IF(%NFieldAuto)
            #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldAuto)
          #ENDIF
          #IF((%FD1I=%FD1L)AND(%FD2I=%FD2L))                    #! Last field?
#!-- %FldArray
            #IF(%FieldComma > 0)
              #SET(%FieldComma, %FieldComma - 1)
              #IF(SUB(%NFieldOpt1,1,1)='E')                     #! RASQL(END)
  %NFieldLine
              #ELSE
  %NFieldLine ,
              #ENDIF
            #ELSE
  %NFieldLine
            #ENDIF
          #ELSE                                                 #! Not last field
  %NFieldLine ,
          #ENDIF                                                #! Just dump stuff
        #ENDLOOP
      #ENDLOOP
    #OF(3)                                                      #! A 3 dimension array
      #LOOP,FOR(%FD1I,1,%FD1L)
        #SET(%FD1S,'_' & %FD1I)
        #LOOP,FOR(%FD2I,1,%FD2L)
          #SET(%FD2S,'_' & %FD2I)
          #LOOP,FOR(%FD3I,1,%FD3L)
            #SET(%FD3S,'_' & %FD3I)
            #SET(%FldArray,%NFieldName & %FD1S & %FD2S & %FD3S)
            #SET(%NFieldLine,   '')
            #SET(%NFieldLine,   %NFieldLine & ''  & %FldArray)
            #SET(%NFieldLine,   %NFieldLine & ' ' & %NFieldTSql)
            #IF(%NFieldNN)
              #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldNN)
            #ENDIF
            #IF(%NFieldDef)
              #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldDef)
            #ENDIF
            #IF(%NFieldAuto)
              #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldAuto)
            #ENDIF
            #IF((%FD1I=%FD1L)AND(%FD2I=%FD2L)AND(%FD3I=%FD3L))  #! Last field?
#!-- %FldArray
              #IF(%FieldComma > 0)
                #SET(%FieldComma, %FieldComma - 1)
                #IF(SUB(%NFieldOpt1,1,1)='E')                   #! RASQL(END)
  %NFieldLine
                #ELSE
  %NFieldLine ,
                #ENDIF
              #ELSE
  %NFieldLine
              #ENDIF
            #ELSE                                               #! Not last field
  %NFieldLine ,
            #ENDIF                                              #! Just dump stuff
          #ENDLOOP
        #ENDLOOP
      #ENDLOOP
    #OF(4)                                                      #! A 4 dimension array
      #LOOP,FOR(%FD1I,1,%FD1L)
        #SET(%FD1S,'_' & %FD1I)
        #LOOP,FOR(%FD2I,1,%FD2L)
          #SET(%FD2S,'_' & %FD2I)
          #LOOP,FOR(%FD3I,1,%FD3L)
            #SET(%FD3S,'_' & %FD3I)
            #LOOP,FOR(%FD4I,1,%FD4L)
              #SET(%FD4S,'_' & %FD4I)
              #SET(%FldArray,%NFieldName & %FD1S & %FD2S & %FD3S & %FD4S)
              #SET(%NFieldLine,   '')
              #SET(%NFieldLine,   %NFieldLine & ''  & %FldArray)
              #SET(%NFieldLine,   %NFieldLine & ' ' & %NFieldTSql)
              #IF(%NFieldNN)
                #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldNN)
              #ENDIF
              #IF(%NFieldDef)
                #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldDef)
              #ENDIF
              #IF(%NFieldAuto)
                #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldAuto)
              #ENDIF
              #IF((%FD1I=%FD1L)AND(%FD2I=%FD2L)AND(%FD3I=%FD3L)AND(%FD4I=%FD4L)) #! Last field?
#!-- %FldArray
                #IF(%FieldComma > 0)
                  #SET(%FieldComma, %FieldComma - 1)
                  #IF(SUB(%NFieldOpt1,1,1)='E')                 #! RASQL(END)
  %NFieldLine
                  #ELSE
  %NFieldLine ,
                  #ENDIF
                #ELSE
  %NFieldLine
                #ENDIF
              #ELSE                                             #! Not last field
  %NFieldLine ,
              #ENDIF                                            #! Just dump stuff
            #ENDLOOP
          #ENDLOOP
        #ENDLOOP
      #ENDLOOP
    #ENDCASE
#!
  #ELSE                                                         #! We GOT normal field
  #!----------------------------------------------------------------------------!
  #! Procesa los campos normales que no son un array                            !
  #!----------------------------------------------------------------------------!
    #SET(%NFieldLine,   '')
    #SET(%NFieldLine,   %NFieldLine & ''  & %NFieldName)        #! Nombre del campo
    #SET(%NFieldLine,   %NFieldLine & ' ' & %NFieldTSql)        #! Tipo SQL
    #IF(%NFieldDef)
      #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldDef)         #! DEFAULT
    #ENDIF
    #IF(%NFieldNN)
      #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldNN)          #! NOT NULL
    #ENDIF
    #IF(%NFieldAuto)
      #SET(%NFieldLine, %NFieldLine & ' ' & %NFieldAuto)        #! AUTO_INCREMENT
    #ENDIF
    #!
    #IF(%FieldComma > 0)
      #SET(%FieldComma, %FieldComma - 1)
      #IF(SUB(%NFieldOpt1,1,1)='E')                             #! RASQL(END)
  %NFieldLine
      #ELSE
  %NFieldLine ,
      #ENDIF
    #ELSE
  %NFieldLine
    #ENDIF
  #ENDIF
#!
  #!----------------------------------------------------------------------------!
  #!----------------------------------------------------------------------------!
#!
#ENDFOR
#!---------------------------------------------------------------------
#GROUP(%PervasiveFieldEnd)
#!---------------------------------------------------------------------
#GROUP(%PervasiveSqlEnd)
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
